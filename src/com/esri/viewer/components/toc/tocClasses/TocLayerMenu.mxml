<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<!---
@private
-->
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:esri="http://www.esri.com/2008/ags"
        dataProvider="{options}"
        initialize="this_initializeHandler(event)"
        itemRenderer="com.esri.viewer.components.toc.tocClasses.TocLayerMenuOptionRenderer"
        rollOut="this_rollOutHandler(event)"
        rollOver="this_rollOverHandler(event)">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Map;
            import com.esri.ags.events.GeometryServiceEvent;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.KMLLayer;
            import com.esri.ags.layers.Layer;
            import com.esri.ags.layers.OpenStreetMapLayer;
            import com.esri.ags.layers.WMSLayer;
            import com.esri.ags.tasks.GeometryServiceSingleton;
            import com.esri.ags.tasks.supportClasses.ProjectParameters;
            import com.esri.ags.utils.WebMercatorUtil;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.components.toc.TOC;
            import com.esri.viewer.utils.LabelUtil;
            import com.esri.viewer.utils.LocalizationUtil;

            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;

            private var _item:Object;
            private var _layer:Layer;
            private var _map:Map;
            private var _toc:TOC;
            private var _transparencyMenuItem:TransparencyMenuItem;

            private function this_initializeHandler(event:FlexEvent):void
            {
                setStyle("backgroundColor", getStyle("contentBackgroundColor"));
                setStyle("borderColor", getStyle("accentColor"));

                geometryService.url = GeometryServiceSingleton.instance.url;
                geometryService.token = GeometryServiceSingleton.instance.token;
                geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
            }

            public function popUpForItem(parent:DisplayObject, item:Object, map:Map, atX:Number, atY:Number):void
            {
                AppEvent.addListener(AppEvent.LAUNCHING_TOC_LAYER_MENU, newLayerMenuLaunching);

                _item = item;
                if (_item is TocMapLayerItem)
                {
                    _layer = TocMapLayerItem(_item).layer;
                    _map = map;
                    positionAt(atX, atY);
                    PopUpManager.addPopUp(this, parent);
                    addOptionsForLayerByType(_layer, parent);
                    typicalItem = LabelUtil.findLongestLabelItem(options.source, "label");
                }
            }

            internal function positionAt(atX:Number, atY:Number):void
            {
                this.x = atX;
                this.y = atY;

                if (_transparencyMenuItem)
                {
                    updateTransparencyMenuPosition();
                }
            }

            private function addOptionsForLayerByType(layer:Layer, parent:DisplayObject):void
            {
                _toc = parent as TOC;
                if (!_toc || !layer)
                {
                    return;
                }

                var tocMapLayerItems:ArrayCollection = _toc.dataProvider as ArrayCollection;
                var isFirstLayer:Boolean = (TocMapLayerItem(tocMapLayerItems.getItemAt(0)).layer.id == layer.id);
                var isLastLayer:Boolean = (TocMapLayerItem(tocMapLayerItems.getItemAt(tocMapLayerItems.length - 1)).layer.id == layer.id);

                moveUpOption.enabled = !isFirstLayer;
                moveDownOption.enabled = !isLastLayer;

                var descriptionOrDownloadResourceName:String =
                    (layer is KMLLayer) ? 'tocMapLayerDownloadLabel' : 'tocMapLayerDescriptionLabel';

                showDescriptionOrDownloadOption.label =
                    LocalizationUtil.getDefaultString(descriptionOrDownloadResourceName);

                layerZoomOption.enabled = layer.initialExtent != null;
            }

            public function remove():void
            {
                PopUpManager.removePopUp(_transparencyMenuItem);
                _transparencyMenuItem = null;
                PopUpManager.removePopUp(this);
            }

            private function zoomToLabel_clickHandler(event:MouseEvent):void
            {
                //remove transparency menu item
                if (_transparencyMenuItem)
                {
                    PopUpManager.removePopUp(_transparencyMenuItem);
                    _transparencyMenuItem = null;
                }

                var layerExtent:Extent = _layer.initialExtent;
                var mapExtent:Extent = _map.extent;
                if (layerExtent && mapExtent
                    && !mapExtent.spatialReference.equals(layerExtent.spatialReference))
                {
                    // convert client side.
                    if (mapExtent.spatialReference.isWebMercator() && layerExtent.spatialReference.wkid == 4326)
                    {
                        // clip the layer extent, so it's not going to Infinity; otherwise gives an error
                        layerExtent.xmin = Math.max(layerExtent.xmin, -180);
                        layerExtent.xmax = Math.min(layerExtent.xmax, 180);
                        layerExtent.ymin = Math.max(layerExtent.ymin, -89.99);
                        layerExtent.ymax = Math.min(layerExtent.ymax, 89.99);
                        layerExtent = WebMercatorUtil.geographicToWebMercator(layerExtent) as Extent;
                        updateMapExtent(layerExtent);
                    }
                    else if (layerExtent.spatialReference.isWebMercator() && mapExtent.spatialReference.wkid == 4326)
                    {
                        layerExtent = WebMercatorUtil.webMercatorToGeographic(layerExtent) as Extent;
                        updateMapExtent(layerExtent);
                    }
                    else
                    {
                        const projectParameters:ProjectParameters = new ProjectParameters;
                        projectParameters.geometries = [ layerExtent ];
                        projectParameters.outSpatialReference = mapExtent.spatialReference
                        geometryService.project(projectParameters);
                    }
                }
                else
                {
                    updateMapExtent(layerExtent);
                }
            }

            private function geometryService_projectCompleteHandler(event:GeometryServiceEvent):void
            {
                updateMapExtent((event.result as Array)[0] as Extent);
            }

            private function updateMapExtent(layerExtent:Extent):void
            {
                _layer.map.zoomTo(layerExtent);
            }

            private function transparencyLabel_clickHandler(event:MouseEvent):void
            {
                if (!_transparencyMenuItem)
                {
                    _transparencyMenuItem = new TransparencyMenuItem();
                    updateTransparencyMenuPosition();
                    _transparencyMenuItem.layer = _layer;
                    PopUpManager.addPopUp(_transparencyMenuItem, this.parent);
                }
                else
                {
                    PopUpManager.removePopUp(_transparencyMenuItem);
                    _transparencyMenuItem = null;
                }
            }

            private function updateTransparencyMenuPosition():void
            {
                _transparencyMenuItem.x = this.x < _transparencyMenuItem.width ? this.x + this.width : this.x - _transparencyMenuItem.width;
                _transparencyMenuItem.y = this.y; // align with the layer option popup
            }

            private function moveUpLabel_clickHandler(event:MouseEvent):void
            {
                var mapLayers:ArrayCollection = _map.layers as ArrayCollection;
                var currentIndex:int = mapLayers.getItemIndex(_layer);
                var layer:Layer;
                var arrOfFeatureLayers:Array;
                if (_layer is ArcGISDynamicMapServiceLayer)
                {
                    arrOfFeatureLayers = [];
                    var dynamicMapServiceLayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(_layer);
                    for each (layer in mapLayers)
                    {
                        if (layer is FeatureLayer && layer.name.indexOf("hiddenLayer_") != -1)
                        {
                            var featureServiceURL:String = FeatureLayer(layer).url.substring(0, FeatureLayer(layer).url.lastIndexOf("/"));
                            var mapServiceURL:String = featureServiceURL.replace("FeatureServer", "MapServer");
                            if (mapServiceURL == dynamicMapServiceLayer.url)
                            {
                                arrOfFeatureLayers.push(layer);
                            }
                        }
                    }
                }
                var nextIndex:int = currentIndex + 1;
                if (arrOfFeatureLayers && arrOfFeatureLayers.length > 0)
                {
                    nextIndex += arrOfFeatureLayers.length;
                }
                if (mapLayers.getItemAt(nextIndex) && mapLayers.getItemAt(nextIndex) is ArcGISDynamicMapServiceLayer)
                {
                    var arr:Array = [];
                    var dynamicMapServiceLayer1:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(mapLayers.getItemAt(nextIndex));
                    for each (layer in mapLayers)
                    {
                        if (layer is FeatureLayer && layer.name.indexOf("hiddenLayer_") != -1)
                        {
                            var featureServiceURL1:String = FeatureLayer(layer).url.substring(0, FeatureLayer(layer).url.lastIndexOf("/"));
                            var mapServiceURL1:String = featureServiceURL1.replace("FeatureServer", "MapServer");
                            if (mapServiceURL1 == dynamicMapServiceLayer1.url)
                            {
                                arr.push(layer);
                            }
                        }
                    }
                    nextIndex += arr.length;
                }
                if (arrOfFeatureLayers && arrOfFeatureLayers.length > 0)
                {
                    for each (var featureLayer:FeatureLayer in arrOfFeatureLayers)
                    {
                        _map.reorderLayer(featureLayer.id, nextIndex);
                    }
                    _map.reorderLayer(_layer.id, nextIndex - 1);
                }
                else
                {
                    _map.reorderLayer(_layer.id, nextIndex);
                }
                remove();
            }

            private function moveDownLabel_clickHandler(event:MouseEvent):void
            {
                var mapLayers:ArrayCollection = _map.layers as ArrayCollection;
                var currentIndex:int = mapLayers.getItemIndex(_layer);
                var layer:Layer;
                var arrOfFeatureLayers:Array;
                if (mapLayers.getItemAt(currentIndex - 1) is FeatureLayer && FeatureLayer(mapLayers.getItemAt(currentIndex - 1)).name.indexOf("hiddenLayer_") != -1)
                {
                    if (_layer is ArcGISDynamicMapServiceLayer)
                    {
                        arrOfFeatureLayers = [];
                        var dynamicMapServiceLayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(_layer);
                        for each (layer in mapLayers)
                        {
                            if (layer is FeatureLayer && layer.name.indexOf("hiddenLayer_") != -1)
                            {
                                var featureServiceURL:String = FeatureLayer(layer).url.substring(0, FeatureLayer(layer).url.lastIndexOf("/"));
                                var mapServiceURL:String = featureServiceURL.replace("FeatureServer", "MapServer");
                                if (mapServiceURL == dynamicMapServiceLayer.url)
                                {
                                    arrOfFeatureLayers.push(layer);
                                }
                            }
                        }
                    }

                    var index:Number = currentIndex - 1;
                    var arr:Array = [];
                    while (mapLayers.getItemAt(index) is FeatureLayer && FeatureLayer(mapLayers.getItemAt(index)).name.indexOf("hiddenLayer_") != -1)
                    {
                        arr.push(FeatureLayer(mapLayers.getItemAt(index)));
                        index--;
                    }
                    if (mapLayers.getItemAt(index) && mapLayers.getItemAt(index) is ArcGISDynamicMapServiceLayer)
                    {
                        var dynamicMapServiceLayer1:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(mapLayers.getItemAt(index));
                        var featureLayersAddedFromMapService:Boolean = true;
                        for each (var featureLayer:FeatureLayer in arr)
                        {
                            var featureServiceURL1:String = featureLayer.url.substring(0, featureLayer.url.lastIndexOf("/"));
                            var mapServiceURL1:String = featureServiceURL1.replace("FeatureServer", "MapServer");
                            if (mapServiceURL1 != dynamicMapServiceLayer1.url)
                            {
                                featureLayersAddedFromMapService = false;
                                break;
                            }
                        }
                        if (featureLayersAddedFromMapService)
                        {
                            if (arrOfFeatureLayers && arrOfFeatureLayers.length > 0)
                            {
                                for each (var featureLayer1:FeatureLayer in arrOfFeatureLayers)
                                {
                                    _map.reorderLayer(featureLayer1.id, index);
                                }
                            }
                            _map.reorderLayer(_layer.id, index);
                        }
                    }
                    else
                    {
                        _map.reorderLayer(_layer.id, index);
                    }
                }
                else if (_layer is ArcGISDynamicMapServiceLayer)
                {
                    arrOfFeatureLayers = [];
                    var dynamicMapServiceLayer2:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(_layer);
                    for each (layer in mapLayers)
                    {
                        if (layer is FeatureLayer && layer.name.indexOf("hiddenLayer_") != -1)
                        {
                            var featureServiceURL2:String = FeatureLayer(layer).url.substring(0, FeatureLayer(layer).url.lastIndexOf("/"));
                            var mapServiceURL2:String = featureServiceURL2.replace("FeatureServer", "MapServer");
                            if (mapServiceURL2 == dynamicMapServiceLayer2.url)
                            {
                                arrOfFeatureLayers.push(layer);
                            }
                        }
                    }
                    if (arrOfFeatureLayers && arrOfFeatureLayers.length > 0)
                    {
                        for each (var featureLayer2:FeatureLayer in arrOfFeatureLayers.reverse())
                        {
                            _map.reorderLayer(featureLayer2.id, currentIndex - 1);
                        }
                    }
                    _map.reorderLayer(_layer.id, currentIndex - 1);
                }
                else
                {
                    _map.reorderLayer(_layer.id, currentIndex - 1);
                }
                remove();
            }

            private function descriptionOrDownloadLabel_clickHandler(event:MouseEvent):void
            {
                var url:String;
                if (_layer is OpenStreetMapLayer)
                {
                    url = "http://www.openstreetmap.org";
                }
                else if (_layer.hasOwnProperty("url"))
                {
                    url = Object(_layer).url;
                    if (_layer is WMSLayer)
                    {
                        url += "?SERVICE=WMS&REQUEST=GetCapabilities";
                    }
                }
                if (url)
                {
                    var request:URLRequest = new URLRequest(url);
                    navigateToURL(request, _layer.id);
                }
            }

            private function this_rollOverHandler(event:MouseEvent):void
            {
                AppEvent.dispatch(AppEvent.RESET_TOC_HIDE_TIMER);
            }

            private function this_rollOutHandler(event:MouseEvent):void
            {
                AppEvent.dispatch(AppEvent.START_TOC_HIDE_TIMER);
            }

            private function newLayerMenuLaunching(event:AppEvent):void
            {
                this.remove();
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:GeometryService id="geometryService" projectComplete="geometryService_projectCompleteHandler(event)"/>

        <s:ArrayList id="options">
            <!-- using this.handler to mitigate warnings where the compiler
                 thinks we're calling the handlers and not referencing them -->
            <s:DataItem id="layerZoomOption"
                        clickHandler="{this.zoomToLabel_clickHandler}"
                        enabled="true"
                        icon="assets/images/LayerZoomTo16.png"
                        label="{LocalizationUtil.getDefaultString('tocMapLayerZoomToLabel')}"/>

            <s:DataItem id="transparencyOption"
                        clickHandler="{this.transparencyLabel_clickHandler}"
                        enabled="true"
                        icon="assets/images/EffectsTransparency16.png"
                        label="{LocalizationUtil.getDefaultString('tocMapLayerTransparencyLabel')}"/>

            <s:DataItem id="moveUpOption"
                        clickHandler="{this.moveUpLabel_clickHandler}"
                        enabled="true"
                        icon="assets/images/LayerUp16.png"
                        label="{LocalizationUtil.getDefaultString('tocMapLayerMoveUpLabel')}"
                        showDivider="true"/>

            <s:DataItem id="moveDownOption"
                        clickHandler="{this.moveDownLabel_clickHandler}"
                        enabled="true"
                        icon="assets/images/LayerDown16.png"
                        label="{LocalizationUtil.getDefaultString('tocMapLayerMoveDownLabel')}"/>

            <!--label added dynamically for description/download option-->
            <s:DataItem id="showDescriptionOrDownloadOption"
                        clickHandler="{this.descriptionOrDownloadLabel_clickHandler}"
                        enabled="true"
                        icon="assets/images/GenericSpatialFile16.png"
                        showDivider="true"/>
        </s:ArrayList>
    </fx:Declarations>

    <s:layout>
        <s:VerticalLayout gap="0"/>
    </s:layout>
</s:List>
